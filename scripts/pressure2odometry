#! /usr/bin/env python

import rospy
from std_msgs.msg import *
from sensor_msgs.msg import *
from nav_msgs.msg import *
from geometry_msgs.msg import *
import math

class Pressure2Odometry:
    temperature = 288.15 # Kelvin
    last_altitude = None

    altitude_buffer = []

    window_size = None

    sea_level_pressure = None
    molar_mass_of_air = None
    gravitational_acceleration = 9.80665
    gas_constant = 8.31432

    origin_altitude = None
    zero_origin = True

    republisher = None

    frame_id = "odom"
    child_frame_id = "base_footprint"

    def __init__(self):
        rospy.init_node("pressure2odometry_node")

        self.sea_level_pressure = rospy.get_param("sea_level_pressure", 101325)
        self.molar_mass_of_air = rospy.get_param("molar_mass_of_air", 0.0289644)

        self.window_size = rospy.get_param("moving_average_window_length", 10)

        self.zero_origin = rospy.get_param("zero_origin", True)

        republish = rospy.get_param("republish", True)
        republish_topic = rospy.get_param("republish_topic", "barometric_pressure")
        if republish:
            self.republisher = rospy.Publisher(republish_topic, FluidPressure, queue_size=5)

        self.frame_id = rospy.get_param("frame_id", "odom")
        self.child_frame_id = rospy.get_param("child_frame_id", "base_footprint")

        self.odometry_pub = rospy.Publisher("/pressure_odometry", Odometry, queue_size=5)
        rospy.Subscriber("/pressure", FluidPressure, self.handle_pressure)

        rospy.Subscriber("/android/fix", NavSatFix, self.handle_navsat)
        self.navsat_pub = rospy.Publisher("/navsat/fix", NavSatFix)

    def run(self):
        while not rospy.is_shutdown():
            rospy.spin()

    def handle_navsat(self, ros_msg):
        ros_msg.header.stamp = rospy.Time.now()
        self.navsat_pub.publish(ros_msg)

    def handle_pressure(self, pressure_msg):
        t = rospy.Time.now()
        if self.republisher != None:
            pressure_msg.header.stamp = t
            self.republisher.publish(pressure_msg)

        altitude = self.compute_altitude(pressure_msg.fluid_pressure)

        self.altitude_buffer.append(altitude)
        if len(self.altitude_buffer) > self.window_size:
            excess = len(self.altitude_buffer) - self.window_size
            del self.altitude_buffer[0:excess]

        avg_altitude = 0
        for a in self.altitude_buffer:
            avg_altitude += a
        avg_altitude /= len(self.altitude_buffer)

        # once we've got a good average going, set the origin
        if (self.zero_origin and 
                self.origin_altitude == None and 
                len(self.altitude_buffer) >= self.window_size):
            self.origin_altitude = avg_altitude

        if self.zero_origin and self.origin_altitude == None:
            return

        if self.zero_origin:
            avg_altitude -= self.origin_altitude

        if self.last_altitude == None:
            self.last_altitude = avg_altitude

        msg = Odometry()
        
        msg.header = Header()
        #msg.header.stamp = pressure_msg.header.stamp
        msg.header.stamp = t
        msg.header.frame_id = "odom"
        msg.child_frame_id = "base_link"

        msg.pose = PoseWithCovariance()
        msg.pose.pose = Pose()
        msg.pose.pose.position = Point(0,0,avg_altitude)
        msg.pose.pose.orientation = Quaternion(0,0,0,1)

        msg.twist = TwistWithCovariance()
        msg.twist.twist = Twist()
        msg.twist.twist.linear = Vector3(0,0,avg_altitude - self.last_altitude)
        msg.twist.twist.angular = Vector3(0,0,0)

        self.odometry_pub.publish(msg)

        self.last_altitude = avg_altitude

    def compute_altitude(self, pressure):
        Ph = pressure
        T = self.temperature
        P0 = self.sea_level_pressure
        m = self.molar_mass_of_air
        g = self.gravitational_acceleration
        k = self.gas_constant
        
        return k*T*math.log(Ph/P0)/(-m*g)

if __name__=="__main__":
    p2o = Pressure2Odometry()
    p2o.run()
