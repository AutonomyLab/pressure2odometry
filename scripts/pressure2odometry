#! /usr/bin/env python

import rospy
from std_msgs.msg import *
from sensor_msgs.msg import *
from nav_msgs.msg import *
from geometry_msgs.msg import *
import math

class Pressure2Odometry:
    temperature = 293 # Kelvin
    last_altitude = None

    altitude_buffer = []

    window_size = None

    sea_level_pressure = None
    molar_mass_of_air = None
    gravitational_acceleration = 9.80665
    boltzmann_constant = 1.3806488e-23 

    def __init__(self):
        rospy.init_node("pressure2odometry_node")

        self.sea_level_pressure = rospy.get_param("sea_level_pressure", 101325)
        self.molar_mass_of_air = rospy.get_param("molar_mass_of_air", 0.0289644)

        self.window_size = rospy.get_param("moving_average_window_length", 10)

        self.odometry_pub = rospy.Publisher("/pressure_odometry", Odometry)
        rospy.Subscriber("/temperature", Temperature, self.handle_temperature)
        rospy.Subscriber("/barometric_pressure", FluidPressure, self.handle_pressure)

    def run(self):
        while not rospy.is_shutdown():
            rospy.spin()

    def handle_temperature(self, temp_msg):
        # assuming in celsius, conversion to Kelvin
        self.temperature = temp_msg.temperature + 273

    def handle_pressure(self, pressure_msg):
        altitude = self.compute_altitude(
                pressure_msg.fluid_pressure, 
                self.temperature)

        self.altitude_buffer.append(altitude)
        if len(self.altitude_buffer) > self.window_size:
            excess = len(self.altitude_buffer) - self.window_size
            del self.altitude_buffer[0:excess]

        avg_altitude = 0
        for a in self.altitude_buffer:
            avg_altitude += a
        avg_altitude /= len(self.altitude_buffer)

        if self.last_altitude == None:
            self.last_altitude = avg_altitude

        msg = Odometry()
        
        msg.header = Header()
        msg.header.stamp = pressure_msg.header.stamp
        msg.header.frame_id = "base_link"
        msg.child_frame_id = "base_link"

        msg.pose = PoseWithCovariance()
        msg.pose.pose = Pose()
        msg.pose.pose.position = Point(0,0,avg_altitude)
        msg.pose.pose.orientation = Quaternion(0,0,0,1)

        msg.twist = TwistWithCovariance()
        msg.twist.twist = Twist()
        msg.twist.twist.linear = Vector3(0,0,avg_altitude - self.last_altitude)
        msg.twist.twist.angular = Vector3(0,0,0)

        self.odometry_pub.publish(msg)

        self.last_altitude = avg_altitude

    def compute_altitude(self, pressure, temperature):
        Ph = pressure
        T = temperature
        P0 = self.sea_level_pressure
        m = self.molar_mass_of_air
        g = self.gravitational_acceleration
        k = self.boltzmann_constant
        
        return k*T*math.log(Ph/P0)/(-m*g)

if __name__=="__main__":
    p2o = Pressure2Odometry()
    p2o.run()
